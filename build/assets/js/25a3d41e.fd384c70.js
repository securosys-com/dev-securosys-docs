"use strict";(self.webpackChunksecurosys_docs=self.webpackChunksecurosys_docs||[]).push([[94206],{28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(96540);const s={},a=n.createContext(s);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:t},e.children)}},91674:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"Use-Cases/QualifiedSignature","title":"Key Attestation & QTSP Validation Steps","description":"Learn about validating Key Attestation Files and Certificate Signing Requests (CSRs) with Securosys HSM using OpenSSL commands for enhanced security assurance.","source":"@site/tsb/Use-Cases/QualifiedSignature.md","sourceDirName":"Use-Cases","slug":"/Use-Cases/QualifiedSignature","permalink":"/tsb/Use-Cases/QualifiedSignature","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1741162132000,"sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"Key Attestation & QTSP Validation Steps","sidebar_label":"Audit and Attestation","description":"Learn about validating Key Attestation Files and Certificate Signing Requests (CSRs) with Securosys HSM using OpenSSL commands for enhanced security assurance.","keywords":["cybersecurity","data security","key management","cloud hsm","hsm key management","hsm cloud","hsm as a service","cloud based hsm","hsm digital signature","hsm services","hsm service","hsm","hardware security module","Key Attestation File validation","CSR validation","OpenSSL commands","Primus HSM","Docker Signing","HashiCorp Vault CE","QTSP","certificate issuance","secure key management"]},"sidebar":"tutorialSidebar","previous":{"title":"Use Cases","permalink":"/tsb/category/use-cases"},"next":{"title":"Application Integration","permalink":"/tsb/Use-Cases/application-integration"}}');var s=i(74848),a=i(28453);const r={sidebar_position:0,title:"Key Attestation & QTSP Validation Steps",sidebar_label:"Audit and Attestation",description:"Learn about validating Key Attestation Files and Certificate Signing Requests (CSRs) with Securosys HSM using OpenSSL commands for enhanced security assurance.",keywords:["cybersecurity","data security","key management","cloud hsm","hsm key management","hsm cloud","hsm as a service","cloud based hsm","hsm digital signature","hsm services","hsm service","hsm","hardware security module","Key Attestation File validation","CSR validation","OpenSSL commands","Primus HSM","Docker Signing","HashiCorp Vault CE","QTSP","certificate issuance","secure key management"]},o="Audit and Attestation",c={},h=[];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"audit-and-attestation",children:"Audit and Attestation"})}),"\n",(0,s.jsx)(t.h1,{id:"1-validation-of-the-key-attestation-file-and-csr-by-the-qtsp",children:"1. Validation of the Key Attestation File and CSR by the QTSP"}),"\n",(0,s.jsx)(t.p,{children:"The Qualified Trust Service Provider validates the CSR and the Key Attestation File by performing\nthe following checks, prior issuing the certificate:"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"The Key Attestation File can be verified back to the Securosys Primus Root Certificate, which involves proofing the authenticity of:"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"the certificate chain, and\nthe signature"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"The Key Attestation File belongs to the signing key from the CSR\nThe signing key has the correct flags, e.g.: \u201cextractable=false\u201d and \u201cnever_extractable=true\u201d"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"For highest assurance and to guarantee that all these checks can be conducted independently from\nany Securosys tools, we\u2019ll use the OpenSSL software library to perform these verifications.\nDocumentation of all OpenSSL command options can be found on the OpenSSL Documentation"}),"\n",(0,s.jsx)(t.h1,{id:"11-verify-authenticity-of-key-attestation-file",children:"1.1 Verify Authenticity of Key Attestation File"}),"\n",(0,s.jsxs)(t.p,{children:["Verify that the Key Attestation File is authentic and was generated by a Primus HSM with the following command. The option '-untrusted' is used to include the intermediate device certificate to construct a certificate chain from the subject certificate to the trust-anchor e.g., Primus-RootCertificate.crt.\nThe Primus Root certificate can be downloaded under: ",(0,s.jsx)(t.a,{href:"https://support.securosys.com/external/knowledge-base/article/147",children:"PrimusHSM Root Certificate for Key-Attestation"}),"\nFor productive Clusters download the ",(0,s.jsx)(t.code,{children:"hsm_rsa_root.crt"})," file and place it alongside the Attestation files."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"openssl verify -CAfile hsm_rsa_root.crt -untrusted PrimusHSM_Attestation.crt PrimusHSM_Attestation.crt\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Example of positive response:\n<SigningKeyAttestationFile>.crt: OK\n\nExample of negative response:\n<SigningKeyAttestationFile>.certificatechain: C = CH, ST = ZH, L =Zurich, O = Securosys, CN = SECUROSYS_ROOTKEY_DEV error 19 at 2 depth lookup:self signed certificate in certificate chain\n"})}),"\n",(0,s.jsx)(t.p,{children:"By the response \u201cOK\u201d you know that the certificate chain was issued by Primus HSM."}),"\n",(0,s.jsx)(t.h1,{id:"12-verify-the-signature-of-the-key-attestation-file",children:"1.2 Verify the Signature of the Key Attestation File"}),"\n",(0,s.jsx)(t.p,{children:"Next you want to verify that the signature of the Key Attestation File is based on the key of the Key Attestation certificate in the certificate chain, which was verified to be issued by the Primus HSM before."}),"\n",(0,s.jsxs)(t.p,{children:["Now, verify the SHA256 signature using the public key from the attestation certificate chain from the message digest of the ",(0,s.jsx)(t.code,{children:"<KeyName>"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"openssl dgst -verify PrimusHSM_Attestation_PublicKey.pem -sha256 -signature <KeyName>.sig <KeyName>.xml\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Example of positive response:\nVerified OK\n\nExample of negative response:\nVerified Failure\nWith the response \u201cVerified OK\u201d, there is evidence that the Key Attestation File, signature, and certificate chain belong together and are authentic.\n"})}),"\n",(0,s.jsx)(t.h1,{id:"13-verify-that-the-key-attestation-belongs-to-the-csr",children:"1.3 Verify that the Key Attestation belongs to the CSR"}),"\n",(0,s.jsx)(t.p,{children:"For the verification that the Key Attestation File and the CSR belong together, different intermediate steps must be performed. This allows further processing using the OpenSSL software library.\nFirst, extract the public key part of the certificate signing request file. The output file has the PEM\nformat."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"openssl req -in <KeyName>.csr -noout -pubkey -out SigningKeyCsrPubKey.pem\n"})}),"\n",(0,s.jsx)(t.p,{children:"Second, convert this public key from PEM to DER format so it can be compared later."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"openssl asn1parse -noout -in SigningKeyCsrPubKey.pem -out SigningKeyCsrPubKey.der\n"})}),"\n",(0,s.jsx)(t.p,{children:"Then, extract the public key from the Key Attestation File."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"grep public_key <KeyName>.xml | sed -e 's,[^>]*>,,' -e's,<.*,,' | base64 -d > SigningKeyAttestationFilePubKey.der\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now, compare the two public keys."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"cmp SigningKeyCsrPubKey.der SigningKeyAttestationFilePubKey.der && echo Verified OK\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"Example of positive response:\nVerified OK\n\nExample of negative response:\nAny other response\n"})}),"\n",(0,s.jsx)(t.p,{children:"With the response \u201cVerified OK\u201d there is proof that the CSR and the Key Attestation File match with each other."}),"\n",(0,s.jsx)(t.h1,{id:"14-verify-key-attributes",children:"1.4 Verify Key Attributes"}),"\n",(0,s.jsxs)(t.p,{children:["After the authenticity of the Key Attestation File has been verified, it is time to verify if the signing key fulfills the requirements imposed by the regulation.\nThe evidence that the signing key was generated on the HSM and was never exported is provided by the key flag \u201cnever_extractable=true\u201d. This flag is set by the HSM automatically at key creation and indicates that the key was never outside of the HSM, and thus must have been generated inside the HSM.\nThe flag \u201cextractable=false\u201d proves that this key can never be exported from the HSM.\nOpen the key attestation File, e.g., ",(0,s.jsx)(t.code,{children:"<SigningKeyAttestationFile>.xml"})," and verify both flags:\n\u2022 extractable: false\n\u2022 never_extractable: true"]}),"\n",(0,s.jsx)(t.p,{children:"Any XML parser may help you in reading the attestation file."}),"\n",(0,s.jsx)(t.h1,{id:"15-issuance-of-certificate-by-qtsp",children:"1.5 Issuance of certificate by QTSP"}),"\n",(0,s.jsx)(t.p,{children:"If all verification steps are positive, there is proof that the signing key, referred to in the certificate\nsigning request file, is securely generated inside a Primus HSM and that it can never be exported\nfrom the HSM."}),"\n",(0,s.jsxs)(t.p,{children:["For further reading reference please consider reading: ",(0,s.jsx)(t.a,{href:"https://dlarea.securosys.com/document/PrimusHSM_AuditAndAttestation_AN-E01.pdf",children:"PrimusHSM_AuditAndAttestation_AN-E01.pdf (29.5.2023)"})]})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);
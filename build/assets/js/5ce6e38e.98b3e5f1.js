"use strict";(self.webpackChunksecurosys_docs=self.webpackChunksecurosys_docs||[]).push([[79279],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},65537:(e,n,t)=>{t.d(n,{A:()=>v});var s=t(96540),r=t(34164),i=t(65627),a=t(56347),o=t(50372),c=t(30604),l=t(11861),d=t(78749);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:r}}=e;return{value:n,label:t,attributes:s,default:r}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=p(e),[a,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:i}))),[l,h]=g({queryString:t,groupId:r}),[m,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,d.Dv)(t);return[r,(0,s.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),x=(()=>{const e=l??m;return u({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{x&&c(x)}),[x]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),f(e)}),[h,f,i]),tabValues:i}}var f=t(9136);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var S=t(74848);function y(e){let{className:n,block:t,selectedValue:s,selectValue:a,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),r=o[t].value;r!==s&&(l(n),a(r))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,S.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,S.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{c.push(e)},onKeyDown:h,onClick:d,...i,className:(0,r.A)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function _(e){let{lazy:n,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,S.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=m(e);return(0,S.jsxs)("div",{className:(0,r.A)("tabs-container",x.tabList),children:[(0,S.jsx)(y,{...n,...e}),(0,S.jsx)(_,{...n,...e})]})}function v(e){const n=(0,f.A)();return(0,S.jsx)(b,{...e,children:h(e.children)},String(n))}},73692:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"osslv3/Use-Cases/nginx","title":"Configure NGINX Server PKCS#11","description":"Discover OpenSSL\'s PKCS11 provider, CLI commands, installation tips, and troubleshooting. Integrate seamlessly with HSM for enhanced security.","source":"@site/openssl/osslv3/Use-Cases/nginx.md","sourceDirName":"osslv3/Use-Cases","slug":"/osslv3/Use-Cases/nginx","permalink":"/openssl/osslv3/Use-Cases/nginx","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"OpenSSL","permalink":"/openssl/tags/open-ssl"},{"inline":true,"label":"PKCS#11","permalink":"/openssl/tags/pkcs-11"},{"inline":true,"label":"NGINX","permalink":"/openssl/tags/nginx"}],"version":"current","lastUpdatedAt":1741162132000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Configure NGINX Server PKCS#11","sidebar_label":"NGINX","description":"Discover OpenSSL\'s PKCS11 provider, CLI commands, installation tips, and troubleshooting. Integrate seamlessly with HSM for enhanced security.","keywords":["OpenSSL PKCS11 provider","OpenSSL PKCS11 API","OpenSSL command line utility (CLI)","OpenSSL CLI commands","OpenSSL installation guide","OpenSSL installation troubleshooting","OpenSSL troubleshooting tips","OpenSSL certificate management","OpenSSL certificate creation","OpenSSL certificate renewal","OpenSSL configuration file","OpenSSL configuration options","OpenSSL configuration guide","OpenSSL encryption algorithms","OpenSSL decryption methods","OpenSSL digital signatures","OpenSSL SSL/TLS protocols","OpenSSL SSL/TLS configuration","OpenSSL heartbleed vulnerability","OpenSSL security updates"],"tags":["OpenSSL","PKCS#11","NGINX"]},"sidebar":"openssl","previous":{"title":"Apache HTTP Server","permalink":"/openssl/osslv3/Use-Cases/apache"},"next":{"title":"Self-Signed Root Certificate","permalink":"/openssl/osslv3/Use-Cases/self_signed_certificate"}}');var r=t(74848),i=t(28453),a=t(65537),o=t(79329);const c={sidebar_position:1,title:"Configure NGINX Server PKCS#11",sidebar_label:"NGINX",description:"Discover OpenSSL's PKCS11 provider, CLI commands, installation tips, and troubleshooting. Integrate seamlessly with HSM for enhanced security.",keywords:["OpenSSL PKCS11 provider","OpenSSL PKCS11 API","OpenSSL command line utility (CLI)","OpenSSL CLI commands","OpenSSL installation guide","OpenSSL installation troubleshooting","OpenSSL troubleshooting tips","OpenSSL certificate management","OpenSSL certificate creation","OpenSSL certificate renewal","OpenSSL configuration file","OpenSSL configuration options","OpenSSL configuration guide","OpenSSL encryption algorithms","OpenSSL decryption methods","OpenSSL digital signatures","OpenSSL SSL/TLS protocols","OpenSSL SSL/TLS configuration","OpenSSL heartbleed vulnerability","OpenSSL security updates"],tags:["OpenSSL","PKCS#11","NGINX"]},l="Nginx Server",d={},h=[{value:"Install nginx on Debian/Ubuntu",id:"install-nginx-on-debianubuntu",level:2},{value:"Preparing the key and certificate",id:"preparing-the-key-and-certificate",level:3},{value:"Install nginx as docker container",id:"install-nginx-as-docker-container",level:2},{value:"Preparation",id:"preparation",level:3},{value:"Building the container image",id:"building-the-container-image",level:3},{value:"Preparing the key and certificate",id:"preparing-the-key-and-certificate-1",level:3},{value:"Starting the service",id:"starting-the-service",level:3},{value:"More resources",id:"more-resources",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"nginx-server",children:"Nginx Server"})}),"\n",(0,r.jsx)(n.p,{children:"The following example shows how to set up NGINX to work with the OpenSSLv3 pkcs11-provider."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["If you prefer a native set-up instead, the nginx.conf in this section and the section ",(0,r.jsx)(n.a,{href:"#preparing-the-key-and-certificate",children:"Preparing the key and\ncertificate"})," will be the most relevant for you."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"The support for key references from a PEM file was added to the\nlatchset pkcs11-provider in version 0.3-22. Please use the release 0.4 or\nnewer."})}),"\n",(0,r.jsxs)(a.A,{groupId:"scenario",children:[(0,r.jsxs)(o.A,{value:"nginx-package",label:"Debian/Ubuntu",default:!0,children:[(0,r.jsx)(n.h2,{id:"install-nginx-on-debianubuntu",children:"Install nginx on Debian/Ubuntu"}),(0,r.jsxs)(n.p,{children:["For this example an NGINX server is started as a service in ",(0,r.jsx)(n.code,{children:"systemd"}),"."]}),(0,r.jsx)(n.p,{children:"Update the package list and install Nginx."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install nginx\n"})}),(0,r.jsx)(n.p,{children:"Configure nginx's systemd to use the correct openssl file."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo nano /usr/lib/systemd/system/nginx.service\n"})}),(0,r.jsxs)(n.p,{children:["Under the section ",(0,r.jsx)(n.code,{children:"[Service]"}),", add the line of the environment of where your openssl.cnf file is located. This entry should be before ",(0,r.jsx)(n.code,{children:"ExecStartPre"}),"."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'Environment="OPENSSL_CONF=/etc/ssl/openssl.cnf"\n'})}),(0,r.jsx)(n.h3,{id:"preparing-the-key-and-certificate",children:"Preparing the key and certificate"}),(0,r.jsxs)(n.p,{children:["For this example a simple self-signed certificate is created. For real\napplications you probably want to get your certificate ",(0,r.jsx)(n.a,{href:"/openssl/osslv3/Use-Cases/self_signed_certificate",children:"signed by a\nCA"}),"\nand put the certificate chain into the cert.pem-file."]}),(0,r.jsx)(n.p,{children:"Again some environment variables are set-up as placeholders."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export P11_TOKEN=<YOUR_USER_NAME>\t# partition name\nexport P11_PIN=<YOUR_PKCS#11_PIN>\t# hsm pkcs11 pin (don't use for production)\nexport P11_KEY_NAME=TESTING_NGINX_KEY\t# name of Key\n"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo mkdir -p /etc/nginx/certificates/\n"})}),(0,r.jsx)(n.p,{children:"A RSA-4096 private key is generated"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'openssl genpkey -propquery "provider=pkcs11" \\\n    -algorithm "rsa" -pkeyopt "rsa_keygen_bits:4096" \\\n    -pkeyopt "pkcs11_uri:pkcs11:token=${P11_TOKEN};object=${P11_KEY_NAME}?pin-value=${P11_PIN}"\n'})}),(0,r.jsx)(n.p,{children:'Given the encoder of the OpenSSL pkcs11-provider is enabled, the key will be outputted as a "PKCS#11 PROVIDER URI" pem file.'}),(0,r.jsx)(n.p,{children:"Use the key to create a self signed certificate"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'sudo openssl req -new -x509 -copy_extensions=copyall \\\n    -key "pkcs11:type=private;token=${P11_TOKEN};object=${P11_KEY_NAME}?pin-value=${P11_PIN}" \\\n    -subj "/C=CH/ST=Bern/L=Bern/O=My Example Organisation/OU=IT Department/CN=www.example.com" \\\n    -addext "subjectAltName = DNS:www.example.com, DNS:*.www.example.com" \\\n    -sha256 -days 99 -out /etc/nginx/certificates/p11-provider-cert.pem\n'})}),(0,r.jsx)(n.p,{children:'For long-term usage, the PKCS PIN can be stored on the machine running Nginx. For security reasons, the "pin-value" should be obfuscated when used by the Nginx process.'}),(0,r.jsxs)(n.p,{children:["Create a new file ",(0,r.jsx)(n.code,{children:"/run/secrets/securosys_p11_pin"})," to be called instead, via ",(0,r.jsx)(n.code,{children:"pin-source=file:/run/secrets/securosys_p11_pin"}),". The OpenSSL decoder will then try to read the pkcs11-pin from ",(0,r.jsx)(n.code,{children:"/run/secrets/securosys_p11_pin"}),"."]}),(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsxs)(n.p,{children:["Each time the VM is rebooted, the file ",(0,r.jsx)(n.code,{children:"/run/secrets/securosys_p11_pin"})," containing the P11 PIN, will be deleted. As a workaround, you can create a persistent file at ",(0,r.jsx)(n.code,{children:"/etc/primus/securosys_p11_pin"})," containing the P11 PIN."]}),(0,r.jsxs)(n.p,{children:["Then, modify the ",(0,r.jsx)(n.code,{children:"/usr/lib/systemd/system/nginx.service"})," file by adding the line ",(0,r.jsx)(n.code,{children:"ExecStartPre=cp -p /etc/primus/securosys_p11_pin /run/secrets"}),' under the "[Service]" section, when configuring nginx further in this page.']})]}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://github.com/latchset/pkcs11-provider/blob/1362378ad3d5f40013bae7562cf7e5d79149925e/tools/uri2pem.py",children:"Python script"}),"\nincluded in the OpenSSL pkcs11-provider's source can be used. Please note that Securosys does not maintain this script and cannot guarantee it will be available and functional in perpetuity."]}),(0,r.jsx)(n.p,{children:"As an alternative, in the shell script below, the pem-file is created using tools commonly available on *nix systems."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"touch generate.sh\nchmod +x generate.sh\n"})}),(0,r.jsx)(n.p,{children:"Copy the below lines into the file generate.sh using your preferred text editor."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\nmake-pkcs11-uri-pem() {\n    # helper function to create a PEM file from a pkcs11-uri provided as argument\n    export LC_ALL=C\n    URI=$1\n    URI_HEX=$(printf \'%s\' "${URI:?}"   | od -An -t x1)\n    DESC="PKCS#11 Provider URI v1.0"\n    DESC_HEX=$(printf \'%s\' "${DESC}" | od -An -t x1)\n    PEM_HEX=$(printf \'30 82 %04x 1a 82 %04x %s 0c 82 %04x %s\'  \\\n\t\t     "$((${#URI} + ${#DESC} + 8))" "${#DESC}" "${DESC_HEX[*]}" \\\n\t\t     "${#URI}" "${URI_HEX[*]}" \\\n\t\t  | tr -d \'\\r\\n\\t \' | sed -e \'s,\\(.\\{2\\}\\),\\\\x\\1,g\')\n    # shellcheck disable=SC2059 # printf should use PEM_HEX as format string\n    PEM=$(printf "${PEM_HEX}" | base64)\n    printf "%s\\n%s\\n%s" \\\n\t   "-----BEGIN PKCS#11 PROVIDER URI-----" \\\n\t   "${PEM}" \\\n\t   "-----END PKCS#11 PROVIDER URI-----"\n}\n# highlight-info-start\nmake-pkcs11-uri-pem "pkcs11:type=private;token=${P11_TOKEN};object=${P11_KEY_NAME}?pin-source=file:/run/secrets/securosys_p11_pin" \\\n    > /etc/nginx/certificates/p11-provider-pkey.pem\n# highlight-info-end\nchmod 644  /etc/nginx/certificates/*\nchgrp www-data /etc/nginx/certificates/*\n'})}),(0,r.jsx)(n.p,{children:"Execute this script to generate and update the file's permissions."}),(0,r.jsxs)(n.p,{children:["The certificates directory is ready, it contains the cert.pem and the pkey.pem referenced in the NGINX configuration. The ",(0,r.jsx)(n.code,{children:"pkey.pem"})," contains the ",(0,r.jsx)(n.code,{children:"pkcs11-uri"})," to the private key, and a file uri to load the pkcs11-pin."]}),(0,r.jsx)(n.p,{children:"To finilize the configuration of the Nginx server, we need to reference our newly created keys and cert."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"sudo nano /etc/nginx/sites-enabled/primus\n\nserver {\n        listen 8082 ssl http2;\n        listen [::]:8082 ssl http2;\n        server_name 34.133.134.100;\n        root /var/www;\n# highlight-info-start\n        ssl_certificate /etc/nginx/certificates/p11-provider-cert.pem; # path of the certificate located in the server\n        ssl_certificate_key /etc/nginx/certificates/p11-provider-pkey.pem; # path of the PKCS#11 PROVIDER URI\n# highlight-info-end\n\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_prefer_server_ciphers on;\n\n        location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n\n        location = /404.html {\n        }\n}\n"})}),(0,r.jsxs)(n.p,{children:["Lastly, we need to allow the nginx process to view the PKCS11 secrets file so that it can use to authenticate to the HSM. To do this, we can simply add the ",(0,r.jsx)(n.code,{children:"www-data"})," user in the ",(0,r.jsx)(n.code,{children:"primus"})," group."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo usermod -a -G primus www-data\n"})}),(0,r.jsxs)(n.p,{children:["As we made changes to the ",(0,r.jsx)(n.code,{children:"systemd"})," file of Nginx, we need to reload and run some sanity tests."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# reload the systemd daemon\nsudo systemctl daemon-reload\n\n# test nginx\nsudo nginx -t\n# nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\n# nginx: configuration file /etc/nginx/nginx.conf test is successful\n\n# restart nginx\nsudo systemctl restart nginx\n"})}),(0,r.jsx)(n.p,{children:"After that, our nginx server will be running and accessible."})]}),(0,r.jsxs)(o.A,{value:"nginx-docker",label:"Docker swarm",children:[(0,r.jsx)(n.h2,{id:"install-nginx-as-docker-container",children:"Install nginx as docker container"}),(0,r.jsx)(n.p,{children:"For this example an NGINX server is started\nas a docker service. The base image is the Red Hat ubi9/nginx-122\nimage."}),(0,r.jsx)(n.h3,{id:"preparation",children:"Preparation"}),(0,r.jsx)(n.p,{children:"The following project structure is used:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 setup\n\u2502\xa0\xa0 \u251c\u2500\u2500 nginx.conf\n\u2502\xa0\xa0 \u251c\u2500\u2500 PrimusAPI_OSSLv3-Provider-PKCS11-*-rhel8_amd64.rpm\n\u2502\xa0\xa0 \u2514\u2500\u2500 PrimusAPI_PKCS11-X-*-rhel8-x86_64.rpm\n\u2514\u2500\u2500 www\n    \u2514\u2500\u2500 index.html\n"})}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"index.html"})," file is a placeholder for your project files that are\ncopied to the image and served by NGINX."]}),(0,r.jsxs)(n.p,{children:["The .rpm files can be obtained from the download sections ",(0,r.jsx)(n.a,{href:"/openssl/osslv3/downloads",children:"OSSL pkcs11-provider"})," and the ",(0,r.jsx)(n.a,{href:"/pkcs/downloads",children:"Primus PKCS#11 library"}),"."]}),(0,r.jsxs)(n.p,{children:["The most unusual thing in the NGINX configuration is the necessity to declare ",(0,r.jsx)(n.code,{children:"env SECUROSYS_PKCS11_CONF;"})," and ",(0,r.jsx)(n.code,{children:"env SECUROSYS_SECRETS_CONF;"})," at the top. The configuration and the secrets file needed by the Primus pkcs11-provider are passed into the container using docker secrets. Thus, they will not be in their primary default location. Their location is is set using environment variables, the lines in the nginx.conf are necessary to ensure that these variables are included in the environment of the worker processes."]}),(0,r.jsxs)(n.p,{children:["The key and the certificate are mounted as a simple volume to ",(0,r.jsx)(n.code,{children:"/certificates"}),". It is not necessary to add special protections to the pkey.pem file as it will only contain a reference to a key on the HSM."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\n#highlight-warning-start\n#\n# IMPORTANT\n#\n# If the location of the configuration and secrets file is passed by\n# environment variable, it is necessary to be declared them here.\n# Otherwise they will not be passed to the nginx-worker processes.\n\nenv SECUROSYS_PKCS11_CONF;\nenv SECUROSYS_SECRETS_CONF;\n#highlight-warning-end\n\nworker_processes auto;\nerror_log /var/log/nginx/error.log notice;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                      \'$status $body_bytes_sent "$http_referer" \'\n                      \'"$http_user_agent" "$http_x_forwarded_for"\';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    keepalive_timeout   65;\n    types_hash_max_size 4096;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /opt/app-root/etc/nginx.d/*.conf;\n\n    server {\n        listen       443 ssl http2;\n        listen       [::]:443 ssl http2;\n        server_name  _;\n        root         /opt/app-root/src;\n\n#highlight-warning-start\n        #\n        # IMPORTANT\n        #\n        # The ssl_certificate_key is not the actual key. The first\n        # line of the PEM file should start with\n        # "BEGIN PKCS#11 PROVIDER URI" and contain the key\'s\n        # pkcs11-uri. If OpenSSL is setup correctly, the\n        # pkcs11-provider will fetch the key handle on the HSM and\n        # redirect all private key operations to the HSM.\n\n        ssl_certificate "/certificates/cert.pem";\n        ssl_certificate_key "/certificates/pkey.pem";\n#highlight-warning-end\n\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_ciphers PROFILE=SYSTEM;\n        ssl_prefer_server_ciphers on;\n\n        # Load configuration files for the default server block.\n        include /opt/app-root/etc/nginx.default.d/*.conf;\n\n        location = /404.html {\n        }\n\n    }\n}\n'})}),(0,r.jsx)(n.p,{children:"The Dockerfile to create the image is fairly simple. The pkcs11-provider in the container is installed and enabled with the three highlighted lines.  The rest consists of switching the user to have the correct permissions and copying the nginx configuration and the website file(s)."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dockerfile",children:'FROM registry.access.redhat.com/ubi9/nginx-122\n\nUSER 0\n# Install the Primus provider and the OSSL pkcs11-provider\nRUN --mount=type=bind,source=setup,target=/data \\\n#highlight-tip-start\n    rpm --install /data/PrimusAPI_OSSLv3-Provider-PKCS11-*-rhel8_amd64.rpm && \\\n    rpm --install /data/PrimusAPI_PKCS11-X-*-rhel8-x86_64.rpm && \\\n    echo ".include /etc/primus/openssl.cnf" >> /etc/ssl/openssl.cnf && \\\n#highlight-tip-end\n    cp /data/nginx.conf "${NGINX_CONF_PATH}"\n\nUSER 1001\n# Copy your web page content into the image\nRUN --mount=type=bind,source=www,target=/tmp/src \\\n    cp /tmp/src/*.html ./\n\nCMD nginx -g "daemon off;"\n'})}),(0,r.jsx)(n.h3,{id:"building-the-container-image",children:"Building the container image"}),(0,r.jsxs)(n.p,{children:["The environment variable ",(0,r.jsx)(n.code,{children:"DOCKER_IMAGE_NAME"})," is introduced, it will be used later when referring to the built image. Given the brevity of the Dockerfile, the image build should be fairly quick."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'DOCKER_IMAGE_NAME=securosys-nginx-example-img\ndocker build -t "${DOCKER_IMAGE_NAME}" .\n'})}),(0,r.jsx)(n.p,{children:"To reiterate the conditions for running the resulting image successfully:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The nginx server expects a certificate and its private key in the   directory ",(0,r.jsx)(n.code,{children:"/certificates"})]}),"\n",(0,r.jsx)(n.li,{children:"The image only contains the example Primus configuration. The   configuration and secrets to communicate with the HSM need to be injected when starting the container."}),"\n"]}),(0,r.jsx)(n.h3,{id:"preparing-the-key-and-certificate-1",children:"Preparing the key and certificate"}),(0,r.jsxs)(n.p,{children:["For this example a simple self-signed certificate is created. For real applications you probably want to get your certificate ",(0,r.jsx)(n.a,{href:"http://localhost:3000/openssl/osslv3/Use-Cases/self_signed_certificate",children:"signed by a CA"})," and put the certificate chain into the cert.pem-file."]}),(0,r.jsx)(n.p,{children:"Again some environment variables are set-up as placeholders."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"P11_TOKEN=<YOUR_USER_NAME>\nP11_PIN=<YOUR_PKCS#11_PIN>\nP11_KEY_NAME=TESTING_NGINX_KEY\n"})}),(0,r.jsxs)(n.p,{children:["For the certificate and the key a ",(0,r.jsx)(n.code,{children:"certificates"})," directory is\ncreated. This directory will later be mounted as a volume."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir -p certificates\n"})}),(0,r.jsx)(n.p,{children:"A RSA-4096 private key is generated"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'openssl genpkey -propquery "provider=pkcs11" \\\n    -algorithm "rsa" -pkeyopt "rsa_keygen_bits:4096" \\\n    -pkeyopt "pkcs11_uri:pkcs11:token=${P11_TOKEN};object=${P11_KEY_NAME}?pin-value=${P11_PIN}"\n'})}),(0,r.jsx)(n.p,{children:"and the key is used to create a self signed certificate:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'openssl req -new -x509 -copy_extensions=copyall \\\n    -key "pkcs11:type=private;token=${P11_TOKEN};object=${P11_KEY_NAME}?pin-value=${P11_PIN}" \\\n    -subj "/C=CH/ST=Bern/L=Bern/O=My Example Organisation/OU=IT Department/CN=www.example.com" \\\n    -addext "subjectAltName = DNS:www.example.com, DNS:*.www.example.com" \\\n    -sha256 -days 99 -out certificates/cert.pem\n'})}),(0,r.jsxs)(n.p,{children:['Given the encoder of the OpenSSL pkcs11-provider is enabled, the key generation will output "PKCS#11 PROVIDER URI"-pem-file.  For security reasons the "pin-value" is omitted. Using that file would work, provided that the pkcs11-pin can be provided each time the OpenSSL password callback pops up. This is impractical for server applications. Instead, a new key file is created with the additional query parameter ',(0,r.jsx)(n.code,{children:"pin-source=file:/run/secrets/securosys_p11_pin"})," the OpenSSL decoder will then try to read the pkcs11-pin from ",(0,r.jsx)(n.code,{children:"/run/secrets/securosys_p11_pin"})," which is the path to the securosys_p11_pin docker secret."]}),(0,r.jsxs)(n.p,{children:["Please note that unlike the uri provided to generate the key, additionally ",(0,r.jsx)(n.code,{children:"type=private"})," is specified in the uri written to the pkey.pem file."]}),(0,r.jsxs)(n.p,{children:["In the script below, the pem-file is created using tools commonly available on *nix systems. Alternatively, the ",(0,r.jsx)(n.a,{href:"https://github.com/latchset/pkcs11-provider/blob/1362378ad3d5f40013bae7562cf7e5d79149925e/tools/uri2pem.py",children:"Python script"})," included in the OpenSSL pkcs11-provider's source can be used."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'make-pkcs11-uri-pem() {\n    # helper function to create a PEM file from a pkcs11-uri provided as argument\n    export LC_ALL=C\n    URI=$1\n    URI_HEX=$(printf \'%s\' "${URI:?}"   | od -An -t x1)\n    DESC="PKCS#11 Provider URI v1.0"\n    DESC_HEX=$(printf \'%s\' "${DESC}" | od -An -t x1)\n    PEM_HEX=$(printf \'30 82 %04x 1a 82 %04x %s 0c 82 %04x %s\'  \\\n\t\t     "$((${#URI} + ${#DESC} + 8))" "${#DESC}" "${DESC_HEX[*]}" \\\n\t\t     "${#URI}" "${URI_HEX[*]}" \\\n\t\t  | tr -d \'\\r\\n\\t \' | sed -e \'s,\\(.\\{2\\}\\),\\\\x\\1,g\')\n    # shellcheck disable=SC2059 # printf should use PEM_HEX as format string\n    PEM=$(printf "${PEM_HEX}" | base64)\n    printf "%s\\n%s\\n%s" \\\n\t   "-----BEGIN PKCS#11 PROVIDER URI-----" \\\n\t   "${PEM}" \\\n\t   "-----END PKCS#11 PROVIDER URI-----"\n}\n\n#highlight-warning-start\nmake-pkcs11-uri-pem "pkcs11:type=private;token=${P11_TOKEN};object=${P11_KEY_NAME}?pin-source=file:/run/secrets/securosys_p11_pin" \\\n    > certificates/pkey.pem\n#highlight-warning-end\n\nchmod 644  certificates/cert.pem certificates/pkey.pem\n'})}),(0,r.jsx)(n.p,{children:"The certificates directory is ready, it contains the cert.pem and the pkey.pem referenced in the NGINX configuration. The pkey.pem contains the pkcs11-uri to the private key and a file uri to load the pkcs11-pin."}),(0,r.jsx)(n.h3,{id:"starting-the-service",children:"Starting the service"}),(0,r.jsxs)(n.p,{children:["In order to create and start the NGINX service, the docker secrets need to be created first.  The docker secrets are part of the ",(0,r.jsx)(n.a,{href:"https://docs.docker.com/engine/swarm/secrets/",children:"docker swarm orchestrator"}),". Make sure to only add secrets to a swarm you trust. It is possible that the local docker instance is not running in swarm mode, in that case ",(0,r.jsx)(n.code,{children:"docker swarm init --autolock=true"})," needs to be run to turn the local instance into a docker swarm and make the process below succeed."]}),(0,r.jsxs)(n.p,{children:["The environment variables ",(0,r.jsx)(n.code,{children:"SECUROSYS_PKCS11_CONF"})," and ",(0,r.jsx)(n.code,{children:"SECUROSYS_SECRETS_CONF"})," should contain the path to the configuration and secret file that should be used in the container. They don't need to be the same as you use on the host system but they should allow accessing the private referenced in the pkey.pem."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'docker secret create securosys_primus_cfg "${SECUROSYS_PKCS11_CONF}"\ndocker secret create securosys_secrets_cfg "${SECUROSYS_SECRETS_CONF}"\ndocker secret create securosys_p11_pin - <<< "${P11_PIN}"\n'})}),(0,r.jsxs)(n.p,{children:["When starting the service, the certificates directory and the secrets are mounted. The environment variables ",(0,r.jsx)(n.code,{children:"SECUROSYS_PKCS11_CONF"})," and ",(0,r.jsx)(n.code,{children:"SECUROSYS_SECRETS_CONF"})," are set in the container such that the Primus pkcs11-provider reads the configuration and secrets from the mounted docker secrets."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'DOCKER_SERVICE_NAME=securosys-nginx-example-svc\nDOCKER_HTTPS_PORT=1443\n\nCERTIFICATES_DIR=$(pwd)/certificates\n\ndocker service create \\\n       --name "${DOCKER_SERVICE_NAME}" \\\n       -p "${DOCKER_HTTPS_PORT}":443 \\\n       --mount="type=bind,source=${CERTIFICATES_DIR},target=/certificates" \\\n       --secret securosys_primus_cfg \\\n       --secret securosys_secrets_cfg \\\n       --secret securosys_p11_pin \\\n       --env SECUROSYS_PKCS11_CONF=/run/secrets/securosys_primus_cfg \\\n       --env SECUROSYS_SECRETS_CONF=/run/secrets/securosys_secrets_cfg \\\n       "${DOCKER_IMAGE_NAME}"\n'})}),(0,r.jsx)(n.p,{children:"The service should now serve the web content."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"curl -vk https://localhost:${DOCKER_HTTPS_PORT}\n"})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"more-resources",children:"More resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/openssl/osslv3/Tutorial/openssl_cli",children:"Generate a key with OpenSSL"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../Tutorial/troubleshooting",children:"Troubleshooting"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.openssl.org/master/",children:"OpenSSL documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://nginx.org/en/docs/",children:"nginx documentation"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},79329:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var s=t(34164);const r={tabItem:"tabItem_Ymn6"};var i=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,a),hidden:t,children:n})}}}]);
"use strict";(self.webpackChunksecurosys_docs=self.webpackChunksecurosys_docs||[]).push([[54564],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(96540);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}},65537:(e,t,n)=>{n.d(t,{A:()=>w});var i=n(96540),r=n(34164),a=n(65627),s=n(56347),o=n(50372),l=n(30604),u=n(11861),c=n(78749);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:i,default:r}}=e;return{value:t,label:n,attributes:i,default:r}}))}(n);return function(e){const t=(0,u.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(a),(0,i.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=p(e),[s,l]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:a}))),[u,d]=f({queryString:n,groupId:r}),[h,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,c.Dv)(n);return[r,(0,i.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),b=(()=>{const e=u??h;return m({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{b&&l(b)}),[b]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),y(e)}),[d,y,a]),tabValues:a}}var y=n(9136);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(74848);function g(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.a_)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),r=o[n].value;r!==i&&(u(t),s(r))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...a,className:(0,r.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":i===t}),children:n??t},t)}))})}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function x(e){const t=h(e);return(0,v.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,v.jsx)(g,{...t,...e}),(0,v.jsx)(k,{...t,...e})]})}function w(e){const t=(0,y.A)();return(0,v.jsx)(x,{...e,children:d(e.children)},String(t))}},79329:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);var i=n(34164);const r={tabItem:"tabItem_Ymn6"};var a=n(74848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,s),hidden:n,children:t})}},90982:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"Concepts/infinite_key_store/limitations","title":"Limitations of Infinite Key Store (IKS)","description":"Explore the limitations of the PrimusHSM Rest-API\'s infinite keystore, covering exclusions in certificate management, synchronous operations, approver management, and key-derivation functionalities.","source":"@site/tsb/Concepts/infinite_key_store/limitations.md","sourceDirName":"Concepts/infinite_key_store","slug":"/Concepts/infinite_key_store/limitations","permalink":"/tsb/Concepts/infinite_key_store/limitations","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1741162132000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Limitations of Infinite Key Store (IKS)","sidebar_label":"Limitations","description":"Explore the limitations of the PrimusHSM Rest-API\'s infinite keystore, covering exclusions in certificate management, synchronous operations, approver management, and key-derivation functionalities.","keywords":["limitations","PrimusHSM Rest-API","infinite keystore","certificate management","synchronous operations","approver management","key-derivation","security limitations","key management","cryptographic operations","cryptography","cybersecurity","data security","hsm","hardware security module"]},"sidebar":"tutorialSidebar","previous":{"title":"Infinite Key Store (IKS)","permalink":"/tsb/Concepts/infinite_key_store/overview"},"next":{"title":"Download","permalink":"/tsb/Download/downloads"}}');var r=n(74848),a=n(28453);n(65537),n(79329);const s={sidebar_position:1,title:"Limitations of Infinite Key Store (IKS)",sidebar_label:"Limitations",description:"Explore the limitations of the PrimusHSM Rest-API's infinite keystore, covering exclusions in certificate management, synchronous operations, approver management, and key-derivation functionalities.",keywords:["limitations","PrimusHSM Rest-API","infinite keystore","certificate management","synchronous operations","approver management","key-derivation","security limitations","key management","cryptographic operations","cryptography","cybersecurity","data security","hsm","hardware security module"]},o=void 0,l={},u=[{value:"Limitations",id:"limitations",level:2},{value:"Usage",id:"usage",level:2},{value:"Security Limitations:",id:"security-limitations",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsx)(t.p,{children:"The infinite keystore is a powerful tool, encompassing many of the capabilities of the PrimusHSM Rest-API with a few exceptions."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Notably, it does not support endpoints dedicated to certificate management, such as those found at /v1/certificate/*."}),"\n",(0,r.jsxs)(t.li,{children:["Additionally, when utilizing the SynchronousSign and SynchronousDecrypt endpoints, it's important to note that the ",(0,r.jsx)(t.code,{children:"signedApprovals"})," field should remain empty. This field is specifically designed for presigning the approval challenge, bypassing the need for TSB's native Workflow Engine."]}),"\n",(0,r.jsx)(t.li,{children:"Moreover, the infinite keystore does not provide endpoints for approver management. These functionalities, found at /v1/approverManagement/*, are not supported within the inifinite keystore context."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Key-Derivation is still possible through the /v1/derivedKey endpoint, temporary Key-derivation is disabled."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"security-limitations",children:"Security Limitations:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"SKA policy modification using the /v1/modify endpoint is not possible, as the key could be changed and an old copy preserved."}),"\n",(0,r.jsx)(t.li,{children:"Changing Key-Passwords (if one is set) is not possible, as the key could be changed and an old copy preserved."}),"\n",(0,r.jsx)(t.li,{children:"Generating key's externally and then importing is not supported /v1/key/import/plain, however /v1/importedKey (import key from a  bip32 seed) is possible."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Despite these limitations, the infinite keystore remains a versatile solution for many cryptographic needs, offering a wide range of features and capabilities."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);
"use strict";(self.webpackChunksecurosys_docs=self.webpackChunksecurosys_docs||[]).push([[15002],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},60046:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ossl-legacy/Tutorial/openssl_cli","title":"Tutorial - OpenSSL 1.1 Command Line Tool (CLI)","description":"Discover OpenSSL\'s PKCS11 provider, CLI commands, installation tips, and troubleshooting. Integrate seamlessly with HSM for enhanced security.","source":"@site/openssl/ossl-legacy/Tutorial/openssl_cli.md","sourceDirName":"ossl-legacy/Tutorial","slug":"/ossl-legacy/Tutorial/openssl_cli","permalink":"/openssl/ossl-legacy/Tutorial/openssl_cli","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1741162132000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Tutorial - OpenSSL 1.1 Command Line Tool (CLI)","sidebar_label":"OpenSSL CLI","description":"Discover OpenSSL\'s PKCS11 provider, CLI commands, installation tips, and troubleshooting. Integrate seamlessly with HSM for enhanced security.","keywords":["OpenSSL PKCS11 provider","OpenSSL PKCS11 API","OpenSSL command line utility (CLI)","OpenSSL CLI commands","OpenSSL installation guide","OpenSSL installation troubleshooting","OpenSSL troubleshooting tips","OpenSSL certificate management","OpenSSL certificate creation","OpenSSL certificate renewal","OpenSSL configuration file","OpenSSL configuration options","OpenSSL configuration guide","OpenSSL encryption algorithms","OpenSSL decryption methods","OpenSSL digital signatures","OpenSSL SSL/TLS protocols","OpenSSL SSL/TLS configuration","OpenSSL heartbleed vulnerability","OpenSSL security updates","OpenSC","pkcs11-tool","CSR","key generation","certificate import"]},"sidebar":"openssl","previous":{"title":"Tutorial","permalink":"/openssl/category/tutorial-2"},"next":{"title":"References and More Information","permalink":"/openssl/ossl-legacy/references_and_more_information"}}');var a=t(74848),r=t(28453);const s={sidebar_position:3,title:"Tutorial - OpenSSL 1.1 Command Line Tool (CLI)",sidebar_label:"OpenSSL CLI",description:"Discover OpenSSL's PKCS11 provider, CLI commands, installation tips, and troubleshooting. Integrate seamlessly with HSM for enhanced security.",keywords:["OpenSSL PKCS11 provider","OpenSSL PKCS11 API","OpenSSL command line utility (CLI)","OpenSSL CLI commands","OpenSSL installation guide","OpenSSL installation troubleshooting","OpenSSL troubleshooting tips","OpenSSL certificate management","OpenSSL certificate creation","OpenSSL certificate renewal","OpenSSL configuration file","OpenSSL configuration options","OpenSSL configuration guide","OpenSSL encryption algorithms","OpenSSL decryption methods","OpenSSL digital signatures","OpenSSL SSL/TLS protocols","OpenSSL SSL/TLS configuration","OpenSSL heartbleed vulnerability","OpenSSL security updates","OpenSC","pkcs11-tool","CSR","key generation","certificate import"]},o="OpenSSL CLI",c={},l=[{value:"Generating Key Pair and Certificate Signing Request (CSR) and Import Certificate",id:"generating-key-pair-and-certificate-signing-request-csr-and-import-certificate",level:2},{value:"RSA Key Pair, CSR and Certificate Import",id:"rsa-key-pair-csr-and-certificate-import",level:3},{value:"EC Key Pair, CSR and Certificate Import",id:"ec-key-pair-csr-and-certificate-import",level:3}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"openssl-cli",children:"OpenSSL CLI"})}),"\n",(0,a.jsx)(n.p,{children:"The examples below are using customized configuration for Primus HSM PKCS#11 provider as shown previously. HSM partition is mounted as slot 0. For your requests you probably have to\nadapt the openssl configuration file or define all your CSR parameters\non the command line."}),"\n",(0,a.jsx)(n.h2,{id:"generating-key-pair-and-certificate-signing-request-csr-and-import-certificate",children:"Generating Key Pair and Certificate Signing Request (CSR) and Import Certificate"}),"\n",(0,a.jsx)(n.p,{children:"This chapter describes how to generate a keypair using OpenSC/pkcs11-tool,\ngenerating a CSR with openssl and importing the certificate using\npkcs11-tool (you cannot create an RSA key inside the HSM with\ngenrsa/genpkey)."}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"It is important to use the same HSM API for the generation, import and usage of objects (keys, certificates), as the APIs may support different metadata."})}),"\n",(0,a.jsx)(n.h3,{id:"rsa-key-pair-csr-and-certificate-import",children:"RSA Key Pair, CSR and Certificate Import"}),"\n",(0,a.jsx)(n.p,{children:"Generating a new key pair using pkcs11-tool: 2048-bit RSA,\nCKA_SENSITIVE set, using slot 0:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pkcs11-tool --module /usr/local/primus/lib/libprimusP11.so --slot=0 \\\n\t--login --pin <PKCS\\#11 PIN> --keypairgen --key-type RSA:2048 \\\n\t--id 1001 --label myrsakey --sensitive\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Using slot 0 with a present token (0x0)\nKey pair generated:\nPrivate Key Object; RSA \n label: myrsakey\n ID: 1001\n Usage: decrypt, sign, unwrap\nPublic Key Object; RSA 2048 bits\n label: myrsakey\n ID: 1001\n Usage: encrypt, verify, wrap\n"})}),"\n",(0,a.jsx)(n.p,{children:"Generate the CSR interactively, using OpenSSL by referencing the key\nID on the HSM by the key ID:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'openssl req -engine pkcs11 -new \\\n\t-key "pkcs11:token=<partition-name>;id=%10%01;type=private" \\\n\t-keyform engine -out rsa.hsm.csr -sha256 -verify\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"engine \"pkcs11\" set.\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:CH\nState or Province Name (full name) []:ZH\nLocality Name (eg, city) [Default City]:Zuerich\nOrganization Name (eg, company) [Default Company Ltd]:Securosys SA\nOrganizational Unit Name (eg, section) []:IT\nCommon Name (eg, your name or your server's hostname) []:cos8.securosys.ch\nEmail Address []:cos8@securosys.ch\n...\nverify OK\n"})}),"\n",(0,a.jsx)(n.p,{children:"Alternatively, you can issue a self signed certificate using OpenSSL:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'openssl req -engine pkcs11 -new -x509 \\\n\t-key "pkcs11:token=<partition-name>;id=%10%01;type=private" \\\n\t-keyform engine -out rsa.hsm.crt -sha256 -days 365 -nodes\n'})}),"\n",(0,a.jsx)(n.p,{children:"If required, import the signed certificate rsa.hsm.crt (DER format),\nusing pkcs-11 tool:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pkcs11-tool --module /usr/local/primus/lib/libprimusP11.so -l \\\n\t-p <PKCS\\#11 PIN> --slot 0 --write-object rsa.hsm.crt \\\n\t--type cert --id 1001 --label myrsakey\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Using slot with ID 0x0\nCreated certificate:\nCertificate Object; type = X.509 cert\n label: myrsakey\n subject: DN: C=CH, O=Securosys SA, OU=IT, CN=cos8.securosys.ch\n ID: 1001\n"})}),"\n",(0,a.jsx)(n.h3,{id:"ec-key-pair-csr-and-certificate-import",children:"EC Key Pair, CSR and Certificate Import"}),"\n",(0,a.jsx)(n.p,{children:"Generating a new key pair using pkcs11-tool: Elliptic Curve secp384r1,\nusing slot 0:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pkcs11-tool --module /usr/local/primus/lib/libprimusP11.so \\\n\t-slot=0 --login --pin <PKCS\\#11 PIN> --keypairgen \\\n\t--key-type EC:secp384r1 --id 1002 --label myeckey\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"Using slot 0 with a present token (0x0)\nKey pair generated:\nPrivate Key Object; EC\n label: myeckey\n ID: 1002\n Usage: sign, derive\nPublic Key Object; EC EC_POINT 384 bits\n EC_POINT: \n046104fb05c1978b6d700e4adb629f81194f5a9c4a06ba4ffe50c41c9165630021fbecd5e91a72db8e48f5d0\n5c81a8dd5d55eca1722587f1f13b9fc4e622eb54b07a15d18f77d774326c3f35abe69ca3a7de53a8e92e2cf2\nc44e1a9a34f52fdbacf71b\n EC_PARAMS: 06052b81040022\n label: myeckey\n ID: 1002\n Usage: verify, derive\n"})}),"\n",(0,a.jsx)(n.p,{children:"Generate the CSR interactively, using OpenSSL by referencing the key\non the HSM by the key Label (id_<id-number>) or label:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'openssl req -engine pkcs11 -new \\\n\t-key "pkcs11:token=<partition-name>;object=myeckey;type=private" \\\n\t-keyform engine -out ec.hsm.csr -sha384 -verify\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:CH\n$State or Province Name (full name) []:ZH\nLocality Name (eg, city) [Default City]:Zuerich\nOrganization Name (eg, company) [Default Company Ltd]:Securosys SA\nOrganizational Unit Name (eg, section) []:IT\nCommon Name (eg, your name or your server's hostname) []:cos8.securosys.ch\nEmail Address []:cos8@securosys.ch\n...\nverify OK\n"})}),"\n",(0,a.jsx)(n.p,{children:"Alternatively, you can issue a self signed certificate using OpenSSL:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'openssl req -engine pkcs11 -new -x509 \\\n\t-key "pkcs11:token=<partition-name>;object=myeckey;type=private" \\\n\t-keyform engine -out ec.hsm.crt -sha384 -days 365 -nodes\n'})}),"\n",(0,a.jsx)(n.p,{children:"If required, import the signed certificate ec.hsm.cer (DER format), using pkcs-11 tool:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pkcs11-tool --module /usr/local/primus/lib/libprimusP11.so -l \\\n\t-p <PKCS\\#11 PIN> --slot 0 --write-object ec.hsm.crt \\\n\t--type cert --id 1002 --label myeckey\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);
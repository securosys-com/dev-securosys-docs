"use strict";(self.webpackChunksecurosys_docs=self.webpackChunksecurosys_docs||[]).push([[75280],{22520:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/KeyStoreEnumerationSample-8774fd0f7a254e451e5396bdbdc51956.java"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},61740:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Tutorials/KeyEnumeration","title":"HSM Key Enumeration with JCE/JCA","description":"Key Enumeration with Java Cryptography Extension (JCE) and Java Cryptography Architecture (JCA) with Securosys Hardware Security Modules.","source":"@site/jce/Tutorials/KeyEnumeration.md","sourceDirName":"Tutorials","slug":"/Tutorials/KeyEnumeration","permalink":"/jce/Tutorials/KeyEnumeration","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1741162132000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"HSM Key Enumeration with JCE/JCA","sidebar_label":"Key Enumeration","description":"Key Enumeration with Java Cryptography Extension (JCE) and Java Cryptography Architecture (JCA) with Securosys Hardware Security Modules.","keywords":["hsm","cloud hsm"]},"sidebar":"tutorialSidebar","previous":{"title":"Key Attributes","permalink":"/jce/Tutorials/KeyAttributes"},"next":{"title":"All Samples","permalink":"/jce/Tutorials/AllSamples"}}');var r=t(74848),s=t(28453);const a={sidebar_position:3,title:"HSM Key Enumeration with JCE/JCA",sidebar_label:"Key Enumeration",description:"Key Enumeration with Java Cryptography Extension (JCE) and Java Cryptography Architecture (JCA) with Securosys Hardware Security Modules.",keywords:["hsm","cloud hsm"]},o="Key Enumeration",l={},c=[];function u(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"key-enumeration",children:"Key Enumeration"})}),"\n",(0,r.jsx)(n.p,{children:"This code provides a sample of how to enumerate and inspect keys and certificates stored in a KeyStore using the Securosys Primus HSM JCE provider."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(22520).A+"",children:"KeyEnumartionSample.java"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'/*\n * Copyright (C) 2015-2022, Securosys SA\n */\n\nimport java.security.KeyStore;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.Enumeration;\n\nimport com.securosys.primus.jce.PrimusKeyAttributes;\nimport com.securosys.primus.jce.PrimusKeyTypes;\nimport com.securosys.primus.jce.PrimusProvider;\n\n/**\n * Sample code using KeyStore aliases enumeration\n * with the Securosys Primus HSM JCE provider.\n */\npublic class KeyStoreEnumerationSample {\n\n    public static void main(final String... args) throws Exception {\n\n        // HSM configuration\n        PrimusHelper.setup(args);\n\n        // Obtain an instance of PrimusKeyStore from the PrimusProvider\n        final KeyStore primusKeyStore = KeyStore.getInstance(PrimusProvider.getKeyStoreTypeName(), PrimusProvider.getProviderName());\n        primusKeyStore.load(null);\n\n        // Iterate through the aliases (keys and certificates) in the PrimusKeyStore\n        final Enumeration<String> keyEnum = primusKeyStore.aliases();\n        while (keyEnum.hasMoreElements()) {\n            final String alias = keyEnum.nextElement();\n\n            // Display the alias name\n            System.out.print(alias);\n\n            // Determine if the alias represents a key or a certificate\n            if (primusKeyStore.isKeyEntry(alias)) {\n                System.out.print(" key");\n            }\n            if (primusKeyStore.isCertificateEntry(alias)) {\n                System.out.print(" cert");\n            }\n\n            // Display the creation date of the key or certificate\n            final Date date = primusKeyStore.getCreationDate(alias);\n            if (date != null) {\n                System.out.print(" of " + date);\n            }\n\n            // Obtain more specific key types and display their flags/attributes\n            final String[][] keyTypes = PrimusKeyTypes.getKeyTypes(alias);\n            System.out.print(" " + Arrays.deepToString(keyTypes));\n            for (final String[] keyType : keyTypes) {\n                final String t = keyType[0]; // PrivateKey/PublicKey/SecretKey/etc\n\n                // Display access flags for the key type\n                final Integer accessFlags = PrimusKeyAttributes.getKeyAccessFlags(alias, t);\n                if (accessFlags != null) {\n                    final int flags = accessFlags.intValue();\n                    System.out.print(" 0x" + Integer.toHexString(flags));\n                    for (int f = 1; f <= flags; f <<= 1) {\n                        if ((flags & f) != 0) {\n                            System.out.print(" " + PrimusKeyAttributes.getAccessFlagName(f));\n                        }\n                    }\n                }\n\n                // Display capability flags for the key type\n                final Integer capabilityFlags = PrimusKeyAttributes.getKeyCapabilityFlags(alias, t);\n                if (capabilityFlags != null) {\n                    final int flags = capabilityFlags.intValue();\n                    System.out.print(" 0x" + Integer.toHexString(flags));\n                    for (int f = 1; f <= flags; f <<= 1) {\n                        if ((flags & f) != 0) {\n                            System.out.print(" " + PrimusKeyAttributes.getCapabilityFlagName(f));\n                        }\n                    }\n                }\n            }\n\n            System.out.println();\n        }\n    }\n\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"HSM and Provider Configuration:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The Primus HSM and provider are configured using ",(0,r.jsx)(n.code,{children:"PrimusHelper.setup(args)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"KeyStore Initialization:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["An instance of ",(0,r.jsx)(n.code,{children:"PrimusKeyStore"})," is obtained from the ",(0,r.jsx)(n.code,{children:"PrimusProvider"})," and loaded."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"KeyStore Aliases Enumeration:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The code iterates through the aliases (keys and certificates) in the ",(0,r.jsx)(n.code,{children:"PrimusKeyStore"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Alias Information Display:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Information such as the alias name, whether it represents a key or certificate, and creation date are displayed."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Types and Attributes Display:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"More specific key types (e.g., PrivateKey, PublicKey) are obtained, and their access and capability flags are displayed."}),"\n"]}),"\n"]}),"\n"]})]})}function y(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);
"use strict";(self.webpackChunksecurosys_docs=self.webpackChunksecurosys_docs||[]).push([[28923],{12397:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Tutorials/TransactionSecurityBroker/samples/ska-python-sample","title":"Sample Approval Script (Python)","description":"Learn how to work with SKA-keys using the PrimusHSM Rest-API.","source":"@site/tsb/Tutorials/TransactionSecurityBroker/samples/ska-python-sample.md","sourceDirName":"Tutorials/TransactionSecurityBroker/samples","slug":"/Tutorials/TransactionSecurityBroker/samples/ska-python-sample","permalink":"/tsb/Tutorials/TransactionSecurityBroker/samples/ska-python-sample","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1741162132000,"sidebarPosition":0,"frontMatter":{"sidebar_position":0,"title":"Sample Approval Script (Python)","sidebar_label":"Sample Approval Script","description":"Learn how to work with SKA-keys using the PrimusHSM Rest-API.","keywords":["Create Key","SKA-key","PrimusHSM Rest-API","cryptographic key management","key creation","smart key attributes","TSB_ENGINE","cryptography","cybersecurity","data security","HSM","hardware security module"]},"sidebar":"tutorialSidebar","previous":{"title":"Samples","permalink":"/tsb/category/samples"},"next":{"title":"Step By Step","permalink":"/tsb/category/step-by-step"}}');var t=s(74848),i=s(28453);const a={sidebar_position:0,title:"Sample Approval Script (Python)",sidebar_label:"Sample Approval Script",description:"Learn how to work with SKA-keys using the PrimusHSM Rest-API.",keywords:["Create Key","SKA-key","PrimusHSM Rest-API","cryptographic key management","key creation","smart key attributes","TSB_ENGINE","cryptography","cybersecurity","data security","HSM","hardware security module"]},o=void 0,p={},l=[{value:"Overview",id:"overview",level:2},{value:"Functionality",id:"functionality",level:2},{value:"<strong>Preparation</strong>",id:"preparation",level:2},{value:"<strong>1. Install Required Libraries</strong>",id:"1-install-required-libraries",level:3},{value:"2. Generate ED25519 Keys",id:"2-generate-ed25519-keys",level:2},{value:"3. Configure the Script",id:"3-configure-the-script",level:2},{value:"Execution",id:"execution",level:2},{value:"Monitor Logs",id:"monitor-logs",level:2},{value:"Script",id:"script",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"#script",children:"Python script below"})," showes how to facilitate Smart Key Attributes workflow using ED25519 approver keys. It integrates with the PrimusHSM REST API provided by ",(0,t.jsx)(n.code,{children:"primusdev.cloudshsm.com"})," to create keys, sign payloads, and manage approval tasks programmatically."]}),"\n",(0,t.jsx)(n.h2,{id:"functionality",children:"Functionality"}),"\n",(0,t.jsx)(n.p,{children:"The script performs the following tasks:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Create SKA EC Key:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Generates a EC-Key (secp256k1) with SmartKeyAttributes and onboards the ED-Approver to the ",(0,t.jsx)(n.code,{children:"ruleUse"})," policy."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"POST"})," ",(0,t.jsx)(n.a,{href:"https://primusdev.cloudshsm.com/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/Keys/createKey",children:"/v1/key"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Sign Payload:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creates a signing request for a payload, specifying key attributes and metadata."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"POST"})," ",(0,t.jsx)(n.a,{href:"https://primusdev.cloudshsm.com/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/Requests/sign",children:"/v1/sign"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Sign Timestamp with Approver Private Key:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Signs a timestamp locally using an ED25519 private key."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Retrieve Approval Tasks:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fetches pending approval tasks for a specific approver."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"POST"})," ",(0,t.jsx)(n.a,{href:"https://primusdev.cloudshsm.com/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/Approval%20Tasks/filterSignTasks",children:"/v1/filteredSignApprovalTask"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Send Approval:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Submits signed approvals to finalize tasks."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"POST"})," ",(0,t.jsx)(n.a,{href:"https://primusdev.cloudshsm.com/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/Approval%20Tasks/approveTask",children:"/v1/approval"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Check Request Status:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Retrieves the status of a specific signing request."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GET"})," ",(0,t.jsx)(n.a,{href:"https://primusdev.cloudshsm.com/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config#/Requests/getRequestStatus_1",children:(0,t.jsx)(n.code,{children:"/v1/request/{id}"})})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"preparation",children:(0,t.jsx)(n.strong,{children:"Preparation"})}),"\n",(0,t.jsx)(n.h3,{id:"1-install-required-libraries",children:(0,t.jsx)(n.strong,{children:"1. Install Required Libraries"})}),"\n",(0,t.jsx)(n.p,{children:"Ensure Python 3.6+ is installed. Install dependencies with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pip install requests cryptography\n"})}),"\n",(0,t.jsx)(n.h2,{id:"2-generate-ed25519-keys",children:"2. Generate ED25519 Keys"}),"\n",(0,t.jsx)(n.p,{children:"Use OpenSSL to generate the required ED25519 private and public keys:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"openssl genpkey -algorithm ED25519 -out ed25519_private_key.pem\nopenssl pkey -in ed25519_private_key.pem -pubout -out ed25519_public_key.pem\n"})}),"\n",(0,t.jsx)(n.h2,{id:"3-configure-the-script",children:"3. Configure the Script"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Replace the placeholder ",(0,t.jsx)(n.code,{children:"YOUR_BEARER_TOKEN"})," in the script with a valid API bearer token."]}),"\n",(0,t.jsxs)(n.li,{children:["Update the ",(0,t.jsx)(n.code,{children:"ED_PRIVATE_KEY"})," and ",(0,t.jsx)(n.code,{children:"ED_PUBLIC_KEY"})," variables with the versions of your generated Approver keys."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"execution",children:"Execution"}),"\n",(0,t.jsx)(n.p,{children:"Execute the script (Replace script_name.py with the actual file name):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"python script_name.py\n"})}),"\n",(0,t.jsx)(n.h2,{id:"monitor-logs",children:"Monitor Logs"}),"\n",(0,t.jsx)(n.p,{children:"The script provides log messages to track progress and debug errors."}),"\n",(0,t.jsx)(n.h2,{id:"script",children:"Script"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'import base64\nimport requests\nimport json\nfrom datetime import datetime, timezone\nfrom cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey\nfrom cryptography.hazmat.primitives import serialization\n\n# Bearer token for authorization\nbearer_token = "YOUR_BEARER_TOKEN"  # Replace with actual token\n\n# openssl genpkey -algorithm ED25519 -out ed25519_private_key.pem\nED_PRIVATE_KEY = [\n    \'MC4CAQAwBQYDK2VwBCIEIGxvVetMFO9RzrSSq7Vmsv8XIpL+Bn995T5UT1RZEgpS\'\n]\napprover1_sanitized_private_key = f"""\n-----BEGIN PRIVATE KEY-----\n{ED_PRIVATE_KEY[0]}\n-----END PRIVATE KEY-----\n"""\n\n# openssl pkey -in ed25519_private_key.pem -pubout -out ed25519_public_key.pem\nED_PUBLIC_KEY = [\n    \'MCowBQYDK2VwAyEAyAeEQG4954XML1azLbiBdJuqRSc46dNSKY2ntfIHj1o=\'\n]\n\n# Utility functions\ndef log(message):\n    print(f"[LOG] {message}")\n\ndef error_log(message):\n    print(f"[ERROR] {message}")\n\n# Functions for operations\ndef create_ska_ec_key(key_name, key_type, curve_oid, approver_public_key):\n    url = "https://primusdev.cloudshsm.com/v1/key"\n    payload = {\n        "label": key_name,\n        "algorithm": key_type,\n        "curveOid": curve_oid,\n        "addressFormat": {"format": "BTC"},\n        "attributes": {\n            "encrypt": False,\n            "decrypt": False,\n            "verify": True,\n            "sign": True,\n            "wrap": False,\n            "unwrap": False,\n            "derive": True,\n            "bip32": True,\n            "slip10": True,\n            "extractable": False,\n            "modifiable": True,\n            "destroyable": True,\n            "sensitive": True,\n            "copyable": False,\n        },\n        "policy": {\n            "ruleUse": {\n                "tokens": [\n                    {\n                        "name": "Token1",\n                        "timelock": 0,\n                        "timeout": 0,\n                        "groups": [\n                            {\n                                "name": "Group1",\n                                "quorum": 1,\n                                "approvals": [\n                                    {\n                                        "type": "public_key",\n                                        "name": "ApproverEDTestKeys_Approver1",\n                                        "value": approver_public_key,\n                                    }\n                                ],\n                            }\n                        ],\n                    }\n                ]\n            },\n            "keyStatus": {"blocked": False},\n        },\n    }\n    headers = {\n        "Content-Type": "application/json",\n        "Authorization": f"Bearer {bearer_token}",\n    }\n\n    try:\n        response = requests.post(url, headers=headers, json=payload)\n        if response.status_code == 201:\n            log(f"Create SKA EC Key Response: {response.status_code}")\n        else:\n            error_log(f"Could not create SKA EC Key: {response.json()}")\n            log("Continuing with SKA-Workflow")\n    except Exception as e:\n        error_log(f"Failed to create SKA EC key: {e}")\n\ndef sign_payload(payload, payload_type, sign_key_name, meta_data, signature_algorithm, signature_type):\n    url = "https://primusdev.cloudshsm.com/v1/sign"\n    payload = {\n        "signRequest": {\n            "payload": payload,\n            "payloadType": payload_type,\n            "signKeyName": sign_key_name,\n            "metaData": meta_data,\n            "signatureAlgorithm": signature_algorithm,\n            "signatureType": signature_type,\n        }\n    }\n    headers = {\n        "Content-Type": "application/json",\n        "Authorization": f"Bearer {bearer_token}",\n    }\n\n    try:\n        log("Creating Sign-Request for key " + sign_key_name)\n        response = requests.post(url, headers=headers, json=payload)\n        if response.status_code == 201:\n            response_json = response.json()\n            log(f"Sign Request ID: {response_json.get(\'signRequestId\')}")\n            return response_json.get("signRequestId")\n        else:\n            error_log(f"Failed to sign payload: {response.status_code}")\n    except Exception as e:\n        error_log(f"Error in sign payload: {e}")\n\ndef sign_with_ed_private_key(private_key_pem, payload):\n    private_key = serialization.load_pem_private_key(private_key_pem.encode(), password=None)\n    if not isinstance(private_key, Ed25519PrivateKey):\n        raise ValueError("Provided key is not an Ed25519 private key.")\n    b64_signature = base64.b64encode(private_key.sign(payload)).decode()\n    log("Signed Payload " + str(payload) + " with Approver PrivateKey")\n    return b64_signature\n\ndef filtered_sign_approval_task(current_timestamp, timestamp_signature, approver_public_key, timestamp_digest_algorithm, request_id, detail_level, page_number, page_size, sort_order):\n    url = "https://primusdev.cloudshsm.com/v1/filteredSignApprovalTask"\n    payload = {\n        "timestamp": current_timestamp,\n        "timestampSignature": timestamp_signature,\n        "approverPublicKey": approver_public_key,\n        "timestampDigestAlgorithm": timestamp_digest_algorithm,\n        "requestId": request_id,\n        "detailLevel": detail_level,\n        "paging": {\n            "pageNumber": page_number,\n            "pageSize": page_size,\n            "sortOrder": sort_order,\n        },\n    }\n    headers = {"Content-Type": "application/json"}\n    log("Going to fetch approval Task for Approver: " + approver_public_key)\n    response = requests.post(url, headers=headers, json=payload)\n    return response.json() if response.status_code == 200 else {}\n\ndef send_approval(task_id, approval_to_be_signed, signature, approval_digest_algorithm, approver_public_key):\n    url = "https://primusdev.cloudshsm.com/v1/approval"\n    payload = {\n        "id": task_id,\n        "approvalToBeSigned": approval_to_be_signed,\n        "signature": signature,\n        "approvalDigestAlgorithm": approval_digest_algorithm,\n        "approverPublicKey": approver_public_key,\n    }\n    headers = {"Content-Type": "application/json"}\n    response = requests.post(url, headers=headers, json=payload)\n    log(f"Approval sent for Task ID: {task_id} - Status Code: {response.status_code}")\n\ndef get_request_status(sign_request_id):\n    url = f"https://primusdev.cloudshsm.com/v1/request/{sign_request_id}"\n    headers = {"Authorization": f"Bearer {bearer_token}"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        log(f"Request Status: {response.json().get(\'status\')}, Approved By: {response.json().get(\'approvedBy\', [])}, Result: {response.json().get(\'result\')}")\n\n# Main Function\ndef main():\n    # Validate Bearer token\n    if not bearer_token or bearer_token == "YOUR_BEARER_TOKEN":\n        error_log("Bearer token is missing or not replaced. Please provide a valid token; Line 23.")\n        return\n    \n    sign_key_name = "SKA_EC_KEY_With_ED_Approvers_1"\n    create_ska_ec_key(sign_key_name, "EC", "1.3.132.0.10", ED_PUBLIC_KEY[0])\n    sign_request_id = sign_payload("U29tZSBQYXlsb2Fk", "UNSPECIFIED", sign_key_name, "Metadata", "SHA256_WITH_ECDSA", "DER")\n    current_timestamp = datetime.now(timezone.utc).isoformat(timespec=\'milliseconds\').replace("+00:00", "Z")\n    timestamp_signature = sign_with_ed_private_key(approver1_sanitized_private_key, current_timestamp.encode())\n    token_challenge = filtered_sign_approval_task(current_timestamp, timestamp_signature, ED_PUBLIC_KEY[0], "EdDSA", sign_request_id, "level1", 0, 1, "CREATION_DATE_ASC")\n\n    for task in token_challenge.get("tasks", []):\n        task_id = task.get("id", "")\n        approval_to_be_signed = base64.b64decode(task.get("approvalToBeSigned", ""))\n        signed_approval = sign_with_ed_private_key(approver1_sanitized_private_key, approval_to_be_signed)\n        send_approval(task_id, task.get("approvalToBeSigned", ""), signed_approval, "EdDSA", task.get("approverPublicKey", ""))\n\n    get_request_status(sign_request_id)\n\nif __name__ == "__main__":\n    main()\n\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var DEFAULT_OPTIONS = {
    feedbackButtonText: 'Feedback',
    modalPosition: "bottom-right",
    buttonStyle: "light",
    buttonPosition: 'bottom-right',
};
function camelToKebab(string) {
    return string.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();
}
function generateFeedbackScript(options) {
    var mergedProps = __assign(__assign({}, DEFAULT_OPTIONS), options);
    var project = mergedProps.project, feedbackButtonText = mergedProps.feedbackButtonText, feedbackProps = __rest(mergedProps, ["project", "feedbackButtonText"]);
    var scriptContent = "\n        const feedbackButton = document.createElement('feedback-button');\n        feedbackButton.setAttribute('project', '".concat(project || "", "');\n    ");
    Object.entries(feedbackProps).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        if (value !== undefined) {
            scriptContent += "\n                feedbackButton.setAttribute('".concat(camelToKebab(key), "', '").concat(value.toString(), "');\n            ");
        }
    });
    scriptContent += "\n        feedbackButton.textContent = '".concat(feedbackButtonText || DEFAULT_OPTIONS.feedbackButtonText, "';\n        document.body.appendChild(feedbackButton);\n    ");
    return scriptContent;
}
module.exports = function (_context, options) {
    var version = options.version || 'latest';
    return {
        name: 'docusaurus-feedback-plugin',
        injectHtmlTags: function () {
            return {
                headTags: [
                    {
                        tagName: 'link',
                        attributes: {
                            rel: 'stylesheet',
                            href: "https://cdn.jsdelivr.net/npm/pushfeedback@".concat(version, "/dist/pushfeedback/pushfeedback.css"),
                        },
                    },
                ],
                postBodyTags: [
                    {
                        tagName: 'script',
                        attributes: {
                            type: 'module',
                            src: "https://cdn.jsdelivr.net/npm/pushfeedback@".concat(version, "/dist/pushfeedback/pushfeedback.esm.js"),
                        },
                    },
                    {
                        tagName: 'script',
                        innerHTML: generateFeedbackScript(options),
                    }
                ]
            };
        },
    };
};
//# sourceMappingURL=index.js.map